/**
 * Generated by orval v7.13.1 üç∫
 * Do not edit manually.
 * Elepad API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { rnFetch } from "../mutator";
export interface Health {
  ok: boolean;
  timestamp: string;
}

export interface User {
  id: string;
  email: string;
  /** @minLength 1 */
  displayName: string;
  /** @nullable */
  avatarUrl: string | null;
  /** @nullable */
  groupId: string | null;
}

/**
 * @nullable
 */
export type ErrorErrorCause = unknown | null;

export type ErrorError = {
  message: string;
  /** @nullable */
  cause?: ErrorErrorCause;
};

export interface Error {
  error: ErrorError;
}

export interface UpdateUser {
  /** @minLength 1 */
  displayName?: string;
  avatarUrl?: string;
}

export interface NewFamilyGroup {
  /** @minLength 1 */
  name: string;
  ownerUserId: string;
}

export interface AddUserWithCode {
  userId: string;
  /** @minLength 1 */
  invitationCode: string;
}

export interface UpdateFamilyGroup {
  /** @minLength 1 */
  name: string;
}

export interface TransferOwnership {
  newOwnerId: string;
}

export interface Activity {
  id: string;
  /** @minLength 1 */
  title: string;
  /** @nullable */
  description?: string | null;
  startsAt: string;
  /** @nullable */
  endsAt?: string | null;
  completed: boolean;
  createdBy: string;
  createdAt: string;
  updatedAt: string;
  /** @nullable */
  frequencyId?: string | null;
}

export interface NewActivity {
  /** @minLength 1 */
  title: string;
  description?: string;
  startsAt: string;
  endsAt?: string;
  completed?: boolean;
  createdBy: string;
}

export interface UpdateActivity {
  /** @minLength 1 */
  title?: string;
  description?: string;
  startsAt: string;
  endsAt?: string;
  completed?: boolean;
}

export interface Memory {
  id: string;
  bookId: string;
  groupId: string;
  createdBy: string;
  /** @nullable */
  title: string | null;
  /** @nullable */
  caption: string | null;
  /** @nullable */
  mediaUrl: string | null;
  /** @nullable */
  mimeType: string | null;
  createdAt: string;
}

export type PatchUsersIdAvatarBody = {
  avatarFile?: Blob;
};

export type GetFamilyGroupIdGroupMembers200Owner = {
  id: string;
  displayName: string;
  /** @nullable */
  avatarUrl: string | null;
};

export type GetFamilyGroupIdGroupMembers200MembersItem = {
  id: string;
  displayName: string;
  /** @nullable */
  avatarUrl: string | null;
};

export type GetFamilyGroupIdGroupMembers200 = {
  name: string;
  owner: GetFamilyGroupIdGroupMembers200Owner;
  members: GetFamilyGroupIdGroupMembers200MembersItem[];
};

export type PatchFamilyGroupIdGroup200 = {
  id: string;
  name: string;
  ownerUserId: string;
};

export type TransferFamilyGroupOwnership200Group = {
  id: string;
  name: string;
  ownerUserId: string;
  createdAt: string;
};

export type TransferFamilyGroupOwnership200PreviousOwner = {
  id: string;
};

export type TransferFamilyGroupOwnership200NewOwner = {
  id: string;
  displayName: string;
};

export type TransferFamilyGroupOwnership200 = {
  group: TransferFamilyGroupOwnership200Group;
  previousOwner: TransferFamilyGroupOwnership200PreviousOwner;
  newOwner: TransferFamilyGroupOwnership200NewOwner;
};

export type GetMemoriesParams = {
  bookId?: string;
  groupId?: string;
  createdBy?: string;
  /**
   * @minimum 0
   * @maximum 100
   * @exclusiveMinimum
   */
  limit?: number;
  /**
   * @minimum 0
   * @nullable
   */
  offset?: number | null;
};

export type GetMemories200 = {
  data: Memory[];
  total: number;
  limit: number;
  offset: number;
};

export type CreateMemoryWithMediaBody = {
  bookId: string;
  groupId: string;
  title?: string;
  caption?: string;
  /** Media file to upload (image, video, or audio) */
  image: Blob;
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type getHealthResponse200 = {
  data: Health;
  status: 200;
};

export type getHealthResponseSuccess = getHealthResponse200 & {
  headers: Headers;
};
export type getHealthResponse = getHealthResponseSuccess;

export const getGetHealthUrl = () => {
  return `/health`;
};

export const getHealth = async (
  options?: RequestInit,
): Promise<getHealthResponse> => {
  return rnFetch<getHealthResponse>(getGetHealthUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetHealthQueryKey = () => {
  return [`/health`] as const;
};

export const getGetHealthQueryOptions = <
  TData = Awaited<ReturnType<typeof getHealth>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>
  >;
  request?: SecondParameter<typeof rnFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetHealthQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealth>>> = ({
    signal,
  }) => getHealth({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHealth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHealthQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHealth>>
>;
export type GetHealthQueryError = unknown;

export function useGetHealth<
  TData = Awaited<ReturnType<typeof getHealth>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealth>>,
          TError,
          Awaited<ReturnType<typeof getHealth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHealth<
  TData = Awaited<ReturnType<typeof getHealth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealth>>,
          TError,
          Awaited<ReturnType<typeof getHealth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHealth<
  TData = Awaited<ReturnType<typeof getHealth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetHealth<
  TData = Awaited<ReturnType<typeof getHealth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHealthQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type getUsersIdResponse200 = {
  data: User;
  status: 200;
};

export type getUsersIdResponse404 = {
  data: void;
  status: 404;
};

export type getUsersIdResponseSuccess = getUsersIdResponse200 & {
  headers: Headers;
};
export type getUsersIdResponseError = getUsersIdResponse404 & {
  headers: Headers;
};

export type getUsersIdResponse =
  | getUsersIdResponseSuccess
  | getUsersIdResponseError;

export const getGetUsersIdUrl = (id: string) => {
  return `/users/${id}`;
};

export const getUsersId = async (
  id: string,
  options?: RequestInit,
): Promise<getUsersIdResponse> => {
  return rnFetch<getUsersIdResponse>(getGetUsersIdUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getGetUsersIdQueryKey = (id?: string) => {
  return [`/users/${id}`] as const;
};

export const getGetUsersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersId>>> = ({
    signal,
  }) => getUsersId(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUsersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersId>>
>;
export type GetUsersIdQueryError = void;

export function useGetUsersId<
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = void,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersId>>,
          TError,
          Awaited<ReturnType<typeof getUsersId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersId<
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersId>>,
          TError,
          Awaited<ReturnType<typeof getUsersId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersId<
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetUsersId<
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUsersIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type patchUsersIdResponse200 = {
  data: User;
  status: 200;
};

export type patchUsersIdResponse400 = {
  data: Error;
  status: 400;
};

export type patchUsersIdResponse404 = {
  data: Error;
  status: 404;
};

export type patchUsersIdResponse500 = {
  data: Error;
  status: 500;
};

export type patchUsersIdResponseSuccess = patchUsersIdResponse200 & {
  headers: Headers;
};
export type patchUsersIdResponseError = (
  | patchUsersIdResponse400
  | patchUsersIdResponse404
  | patchUsersIdResponse500
) & {
  headers: Headers;
};

export type patchUsersIdResponse =
  | patchUsersIdResponseSuccess
  | patchUsersIdResponseError;

export const getPatchUsersIdUrl = (id: string) => {
  return `/users/${id}`;
};

export const patchUsersId = async (
  id: string,
  updateUser: UpdateUser,
  options?: RequestInit,
): Promise<patchUsersIdResponse> => {
  return rnFetch<patchUsersIdResponse>(getPatchUsersIdUrl(id), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateUser),
  });
};

export const getPatchUsersIdMutationOptions = <
  TError = Error | Error | Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchUsersId>>,
    TError,
    { id: string; data: UpdateUser },
    TContext
  >;
  request?: SecondParameter<typeof rnFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchUsersId>>,
  TError,
  { id: string; data: UpdateUser },
  TContext
> => {
  const mutationKey = ["patchUsersId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchUsersId>>,
    { id: string; data: UpdateUser }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchUsersId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchUsersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchUsersId>>
>;
export type PatchUsersIdMutationBody = UpdateUser;
export type PatchUsersIdMutationError = Error | Error | Error;

export const usePatchUsersId = <
  TError = Error | Error | Error,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof patchUsersId>>,
      TError,
      { id: string; data: UpdateUser },
      TContext
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof patchUsersId>>,
  TError,
  { id: string; data: UpdateUser },
  TContext
> => {
  const mutationOptions = getPatchUsersIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type patchUsersIdAvatarResponse200 = {
  data: User;
  status: 200;
};

export type patchUsersIdAvatarResponse400 = {
  data: Error;
  status: 400;
};

export type patchUsersIdAvatarResponse404 = {
  data: Error;
  status: 404;
};

export type patchUsersIdAvatarResponse500 = {
  data: Error;
  status: 500;
};

export type patchUsersIdAvatarResponseSuccess =
  patchUsersIdAvatarResponse200 & {
    headers: Headers;
  };
export type patchUsersIdAvatarResponseError = (
  | patchUsersIdAvatarResponse400
  | patchUsersIdAvatarResponse404
  | patchUsersIdAvatarResponse500
) & {
  headers: Headers;
};

export type patchUsersIdAvatarResponse =
  | patchUsersIdAvatarResponseSuccess
  | patchUsersIdAvatarResponseError;

export const getPatchUsersIdAvatarUrl = (id: string) => {
  return `/users/${id}/avatar`;
};

export const patchUsersIdAvatar = async (
  id: string,
  patchUsersIdAvatarBody: PatchUsersIdAvatarBody,
  options?: RequestInit,
): Promise<patchUsersIdAvatarResponse> => {
  const formData = new FormData();
  if (patchUsersIdAvatarBody.avatarFile !== undefined) {
    formData.append(`avatarFile`, patchUsersIdAvatarBody.avatarFile);
  }

  return rnFetch<patchUsersIdAvatarResponse>(getPatchUsersIdAvatarUrl(id), {
    ...options,
    method: "PATCH",
    body: formData,
  });
};

export const getPatchUsersIdAvatarMutationOptions = <
  TError = Error | Error | Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchUsersIdAvatar>>,
    TError,
    { id: string; data: PatchUsersIdAvatarBody },
    TContext
  >;
  request?: SecondParameter<typeof rnFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchUsersIdAvatar>>,
  TError,
  { id: string; data: PatchUsersIdAvatarBody },
  TContext
> => {
  const mutationKey = ["patchUsersIdAvatar"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchUsersIdAvatar>>,
    { id: string; data: PatchUsersIdAvatarBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchUsersIdAvatar(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchUsersIdAvatarMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchUsersIdAvatar>>
>;
export type PatchUsersIdAvatarMutationBody = PatchUsersIdAvatarBody;
export type PatchUsersIdAvatarMutationError = Error | Error | Error;

export const usePatchUsersIdAvatar = <
  TError = Error | Error | Error,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof patchUsersIdAvatar>>,
      TError,
      { id: string; data: PatchUsersIdAvatarBody },
      TContext
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof patchUsersIdAvatar>>,
  TError,
  { id: string; data: PatchUsersIdAvatarBody },
  TContext
> => {
  const mutationOptions = getPatchUsersIdAvatarMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type postFamilyGroupCreateResponse201 = {
  data: void;
  status: 201;
};

export type postFamilyGroupCreateResponse400 = {
  data: Error;
  status: 400;
};

export type postFamilyGroupCreateResponse500 = {
  data: Error;
  status: 500;
};

export type postFamilyGroupCreateResponseSuccess =
  postFamilyGroupCreateResponse201 & {
    headers: Headers;
  };
export type postFamilyGroupCreateResponseError = (
  | postFamilyGroupCreateResponse400
  | postFamilyGroupCreateResponse500
) & {
  headers: Headers;
};

export type postFamilyGroupCreateResponse =
  | postFamilyGroupCreateResponseSuccess
  | postFamilyGroupCreateResponseError;

export const getPostFamilyGroupCreateUrl = () => {
  return `/familyGroup/create`;
};

export const postFamilyGroupCreate = async (
  newFamilyGroup: NewFamilyGroup,
  options?: RequestInit,
): Promise<postFamilyGroupCreateResponse> => {
  return rnFetch<postFamilyGroupCreateResponse>(getPostFamilyGroupCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(newFamilyGroup),
  });
};

export const getPostFamilyGroupCreateMutationOptions = <
  TError = Error | Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postFamilyGroupCreate>>,
    TError,
    { data: NewFamilyGroup },
    TContext
  >;
  request?: SecondParameter<typeof rnFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postFamilyGroupCreate>>,
  TError,
  { data: NewFamilyGroup },
  TContext
> => {
  const mutationKey = ["postFamilyGroupCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postFamilyGroupCreate>>,
    { data: NewFamilyGroup }
  > = (props) => {
    const { data } = props ?? {};

    return postFamilyGroupCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostFamilyGroupCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof postFamilyGroupCreate>>
>;
export type PostFamilyGroupCreateMutationBody = NewFamilyGroup;
export type PostFamilyGroupCreateMutationError = Error | Error;

export const usePostFamilyGroupCreate = <
  TError = Error | Error,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postFamilyGroupCreate>>,
      TError,
      { data: NewFamilyGroup },
      TContext
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postFamilyGroupCreate>>,
  TError,
  { data: NewFamilyGroup },
  TContext
> => {
  const mutationOptions = getPostFamilyGroupCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type postFamilyGroupLinkResponse200 = {
  data: void;
  status: 200;
};

export type postFamilyGroupLinkResponse400 = {
  data: Error;
  status: 400;
};

export type postFamilyGroupLinkResponse404 = {
  data: Error;
  status: 404;
};

export type postFamilyGroupLinkResponse500 = {
  data: Error;
  status: 500;
};

export type postFamilyGroupLinkResponseSuccess =
  postFamilyGroupLinkResponse200 & {
    headers: Headers;
  };
export type postFamilyGroupLinkResponseError = (
  | postFamilyGroupLinkResponse400
  | postFamilyGroupLinkResponse404
  | postFamilyGroupLinkResponse500
) & {
  headers: Headers;
};

export type postFamilyGroupLinkResponse =
  | postFamilyGroupLinkResponseSuccess
  | postFamilyGroupLinkResponseError;

export const getPostFamilyGroupLinkUrl = () => {
  return `/familyGroup/link`;
};

export const postFamilyGroupLink = async (
  addUserWithCode: AddUserWithCode,
  options?: RequestInit,
): Promise<postFamilyGroupLinkResponse> => {
  return rnFetch<postFamilyGroupLinkResponse>(getPostFamilyGroupLinkUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(addUserWithCode),
  });
};

export const getPostFamilyGroupLinkMutationOptions = <
  TError = Error | Error | Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postFamilyGroupLink>>,
    TError,
    { data: AddUserWithCode },
    TContext
  >;
  request?: SecondParameter<typeof rnFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postFamilyGroupLink>>,
  TError,
  { data: AddUserWithCode },
  TContext
> => {
  const mutationKey = ["postFamilyGroupLink"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postFamilyGroupLink>>,
    { data: AddUserWithCode }
  > = (props) => {
    const { data } = props ?? {};

    return postFamilyGroupLink(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostFamilyGroupLinkMutationResult = NonNullable<
  Awaited<ReturnType<typeof postFamilyGroupLink>>
>;
export type PostFamilyGroupLinkMutationBody = AddUserWithCode;
export type PostFamilyGroupLinkMutationError = Error | Error | Error;

export const usePostFamilyGroupLink = <
  TError = Error | Error | Error,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postFamilyGroupLink>>,
      TError,
      { data: AddUserWithCode },
      TContext
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postFamilyGroupLink>>,
  TError,
  { data: AddUserWithCode },
  TContext
> => {
  const mutationOptions = getPostFamilyGroupLinkMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type getFamilyGroupIdGroupInviteResponse200 = {
  data: void;
  status: 200;
};

export type getFamilyGroupIdGroupInviteResponse400 = {
  data: Error;
  status: 400;
};

export type getFamilyGroupIdGroupInviteResponse404 = {
  data: Error;
  status: 404;
};

export type getFamilyGroupIdGroupInviteResponse500 = {
  data: Error;
  status: 500;
};

export type getFamilyGroupIdGroupInviteResponseSuccess =
  getFamilyGroupIdGroupInviteResponse200 & {
    headers: Headers;
  };
export type getFamilyGroupIdGroupInviteResponseError = (
  | getFamilyGroupIdGroupInviteResponse400
  | getFamilyGroupIdGroupInviteResponse404
  | getFamilyGroupIdGroupInviteResponse500
) & {
  headers: Headers;
};

export type getFamilyGroupIdGroupInviteResponse =
  | getFamilyGroupIdGroupInviteResponseSuccess
  | getFamilyGroupIdGroupInviteResponseError;

export const getGetFamilyGroupIdGroupInviteUrl = (idGroup: string) => {
  return `/familyGroup/${idGroup}/invite`;
};

export const getFamilyGroupIdGroupInvite = async (
  idGroup: string,
  options?: RequestInit,
): Promise<getFamilyGroupIdGroupInviteResponse> => {
  return rnFetch<getFamilyGroupIdGroupInviteResponse>(
    getGetFamilyGroupIdGroupInviteUrl(idGroup),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetFamilyGroupIdGroupInviteQueryKey = (idGroup?: string) => {
  return [`/familyGroup/${idGroup}/invite`] as const;
};

export const getGetFamilyGroupIdGroupInviteQueryOptions = <
  TData = Awaited<ReturnType<typeof getFamilyGroupIdGroupInvite>>,
  TError = Error | Error | Error,
>(
  idGroup: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFamilyGroupIdGroupInvite>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetFamilyGroupIdGroupInviteQueryKey(idGroup);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getFamilyGroupIdGroupInvite>>
  > = ({ signal }) =>
    getFamilyGroupIdGroupInvite(idGroup, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!idGroup,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getFamilyGroupIdGroupInvite>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetFamilyGroupIdGroupInviteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFamilyGroupIdGroupInvite>>
>;
export type GetFamilyGroupIdGroupInviteQueryError = Error | Error | Error;

export function useGetFamilyGroupIdGroupInvite<
  TData = Awaited<ReturnType<typeof getFamilyGroupIdGroupInvite>>,
  TError = Error | Error | Error,
>(
  idGroup: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFamilyGroupIdGroupInvite>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFamilyGroupIdGroupInvite>>,
          TError,
          Awaited<ReturnType<typeof getFamilyGroupIdGroupInvite>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFamilyGroupIdGroupInvite<
  TData = Awaited<ReturnType<typeof getFamilyGroupIdGroupInvite>>,
  TError = Error | Error | Error,
>(
  idGroup: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFamilyGroupIdGroupInvite>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFamilyGroupIdGroupInvite>>,
          TError,
          Awaited<ReturnType<typeof getFamilyGroupIdGroupInvite>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFamilyGroupIdGroupInvite<
  TData = Awaited<ReturnType<typeof getFamilyGroupIdGroupInvite>>,
  TError = Error | Error | Error,
>(
  idGroup: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFamilyGroupIdGroupInvite>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetFamilyGroupIdGroupInvite<
  TData = Awaited<ReturnType<typeof getFamilyGroupIdGroupInvite>>,
  TError = Error | Error | Error,
>(
  idGroup: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFamilyGroupIdGroupInvite>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetFamilyGroupIdGroupInviteQueryOptions(
    idGroup,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type getFamilyGroupIdGroupMembersResponse200 = {
  data: GetFamilyGroupIdGroupMembers200;
  status: 200;
};

export type getFamilyGroupIdGroupMembersResponse400 = {
  data: Error;
  status: 400;
};

export type getFamilyGroupIdGroupMembersResponse404 = {
  data: Error;
  status: 404;
};

export type getFamilyGroupIdGroupMembersResponse500 = {
  data: Error;
  status: 500;
};

export type getFamilyGroupIdGroupMembersResponseSuccess =
  getFamilyGroupIdGroupMembersResponse200 & {
    headers: Headers;
  };
export type getFamilyGroupIdGroupMembersResponseError = (
  | getFamilyGroupIdGroupMembersResponse400
  | getFamilyGroupIdGroupMembersResponse404
  | getFamilyGroupIdGroupMembersResponse500
) & {
  headers: Headers;
};

export type getFamilyGroupIdGroupMembersResponse =
  | getFamilyGroupIdGroupMembersResponseSuccess
  | getFamilyGroupIdGroupMembersResponseError;

export const getGetFamilyGroupIdGroupMembersUrl = (idGroup: string) => {
  return `/familyGroup/${idGroup}/members`;
};

export const getFamilyGroupIdGroupMembers = async (
  idGroup: string,
  options?: RequestInit,
): Promise<getFamilyGroupIdGroupMembersResponse> => {
  return rnFetch<getFamilyGroupIdGroupMembersResponse>(
    getGetFamilyGroupIdGroupMembersUrl(idGroup),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetFamilyGroupIdGroupMembersQueryKey = (idGroup?: string) => {
  return [`/familyGroup/${idGroup}/members`] as const;
};

export const getGetFamilyGroupIdGroupMembersQueryOptions = <
  TData = Awaited<ReturnType<typeof getFamilyGroupIdGroupMembers>>,
  TError = Error | Error | Error,
>(
  idGroup: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFamilyGroupIdGroupMembers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetFamilyGroupIdGroupMembersQueryKey(idGroup);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getFamilyGroupIdGroupMembers>>
  > = ({ signal }) =>
    getFamilyGroupIdGroupMembers(idGroup, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!idGroup,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getFamilyGroupIdGroupMembers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetFamilyGroupIdGroupMembersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFamilyGroupIdGroupMembers>>
>;
export type GetFamilyGroupIdGroupMembersQueryError = Error | Error | Error;

export function useGetFamilyGroupIdGroupMembers<
  TData = Awaited<ReturnType<typeof getFamilyGroupIdGroupMembers>>,
  TError = Error | Error | Error,
>(
  idGroup: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFamilyGroupIdGroupMembers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFamilyGroupIdGroupMembers>>,
          TError,
          Awaited<ReturnType<typeof getFamilyGroupIdGroupMembers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFamilyGroupIdGroupMembers<
  TData = Awaited<ReturnType<typeof getFamilyGroupIdGroupMembers>>,
  TError = Error | Error | Error,
>(
  idGroup: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFamilyGroupIdGroupMembers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFamilyGroupIdGroupMembers>>,
          TError,
          Awaited<ReturnType<typeof getFamilyGroupIdGroupMembers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFamilyGroupIdGroupMembers<
  TData = Awaited<ReturnType<typeof getFamilyGroupIdGroupMembers>>,
  TError = Error | Error | Error,
>(
  idGroup: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFamilyGroupIdGroupMembers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetFamilyGroupIdGroupMembers<
  TData = Awaited<ReturnType<typeof getFamilyGroupIdGroupMembers>>,
  TError = Error | Error | Error,
>(
  idGroup: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFamilyGroupIdGroupMembers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetFamilyGroupIdGroupMembersQueryOptions(
    idGroup,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type removeUserFromFamilyGroupResponse200 = {
  data: void;
  status: 200;
};

export type removeUserFromFamilyGroupResponse400 = {
  data: Error;
  status: 400;
};

export type removeUserFromFamilyGroupResponse401 = {
  data: Error;
  status: 401;
};

export type removeUserFromFamilyGroupResponse403 = {
  data: Error;
  status: 403;
};

export type removeUserFromFamilyGroupResponse404 = {
  data: Error;
  status: 404;
};

export type removeUserFromFamilyGroupResponse500 = {
  data: Error;
  status: 500;
};

export type removeUserFromFamilyGroupResponseSuccess =
  removeUserFromFamilyGroupResponse200 & {
    headers: Headers;
  };
export type removeUserFromFamilyGroupResponseError = (
  | removeUserFromFamilyGroupResponse400
  | removeUserFromFamilyGroupResponse401
  | removeUserFromFamilyGroupResponse403
  | removeUserFromFamilyGroupResponse404
  | removeUserFromFamilyGroupResponse500
) & {
  headers: Headers;
};

export type removeUserFromFamilyGroupResponse =
  | removeUserFromFamilyGroupResponseSuccess
  | removeUserFromFamilyGroupResponseError;

export const getRemoveUserFromFamilyGroupUrl = (
  idGroup: string,
  idUser: string,
) => {
  return `/familyGroup/${idGroup}/member/${idUser}`;
};

export const removeUserFromFamilyGroup = async (
  idGroup: string,
  idUser: string,
  options?: RequestInit,
): Promise<removeUserFromFamilyGroupResponse> => {
  return rnFetch<removeUserFromFamilyGroupResponse>(
    getRemoveUserFromFamilyGroupUrl(idGroup, idUser),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getRemoveUserFromFamilyGroupMutationOptions = <
  TError = Error | Error | Error | Error | Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeUserFromFamilyGroup>>,
    TError,
    { idGroup: string; idUser: string },
    TContext
  >;
  request?: SecondParameter<typeof rnFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeUserFromFamilyGroup>>,
  TError,
  { idGroup: string; idUser: string },
  TContext
> => {
  const mutationKey = ["removeUserFromFamilyGroup"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeUserFromFamilyGroup>>,
    { idGroup: string; idUser: string }
  > = (props) => {
    const { idGroup, idUser } = props ?? {};

    return removeUserFromFamilyGroup(idGroup, idUser, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveUserFromFamilyGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeUserFromFamilyGroup>>
>;

export type RemoveUserFromFamilyGroupMutationError =
  | Error
  | Error
  | Error
  | Error
  | Error;

export const useRemoveUserFromFamilyGroup = <
  TError = Error | Error | Error | Error | Error,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof removeUserFromFamilyGroup>>,
      TError,
      { idGroup: string; idUser: string },
      TContext
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof removeUserFromFamilyGroup>>,
  TError,
  { idGroup: string; idUser: string },
  TContext
> => {
  const mutationOptions = getRemoveUserFromFamilyGroupMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type patchFamilyGroupIdGroupResponse200 = {
  data: PatchFamilyGroupIdGroup200;
  status: 200;
};

export type patchFamilyGroupIdGroupResponse400 = {
  data: Error;
  status: 400;
};

export type patchFamilyGroupIdGroupResponse404 = {
  data: Error;
  status: 404;
};

export type patchFamilyGroupIdGroupResponse500 = {
  data: Error;
  status: 500;
};

export type patchFamilyGroupIdGroupResponseSuccess =
  patchFamilyGroupIdGroupResponse200 & {
    headers: Headers;
  };
export type patchFamilyGroupIdGroupResponseError = (
  | patchFamilyGroupIdGroupResponse400
  | patchFamilyGroupIdGroupResponse404
  | patchFamilyGroupIdGroupResponse500
) & {
  headers: Headers;
};

export type patchFamilyGroupIdGroupResponse =
  | patchFamilyGroupIdGroupResponseSuccess
  | patchFamilyGroupIdGroupResponseError;

export const getPatchFamilyGroupIdGroupUrl = (idGroup: string) => {
  return `/familyGroup/${idGroup}`;
};

export const patchFamilyGroupIdGroup = async (
  idGroup: string,
  updateFamilyGroup: UpdateFamilyGroup,
  options?: RequestInit,
): Promise<patchFamilyGroupIdGroupResponse> => {
  return rnFetch<patchFamilyGroupIdGroupResponse>(
    getPatchFamilyGroupIdGroupUrl(idGroup),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updateFamilyGroup),
    },
  );
};

export const getPatchFamilyGroupIdGroupMutationOptions = <
  TError = Error | Error | Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchFamilyGroupIdGroup>>,
    TError,
    { idGroup: string; data: UpdateFamilyGroup },
    TContext
  >;
  request?: SecondParameter<typeof rnFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchFamilyGroupIdGroup>>,
  TError,
  { idGroup: string; data: UpdateFamilyGroup },
  TContext
> => {
  const mutationKey = ["patchFamilyGroupIdGroup"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchFamilyGroupIdGroup>>,
    { idGroup: string; data: UpdateFamilyGroup }
  > = (props) => {
    const { idGroup, data } = props ?? {};

    return patchFamilyGroupIdGroup(idGroup, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchFamilyGroupIdGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchFamilyGroupIdGroup>>
>;
export type PatchFamilyGroupIdGroupMutationBody = UpdateFamilyGroup;
export type PatchFamilyGroupIdGroupMutationError = Error | Error | Error;

export const usePatchFamilyGroupIdGroup = <
  TError = Error | Error | Error,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof patchFamilyGroupIdGroup>>,
      TError,
      { idGroup: string; data: UpdateFamilyGroup },
      TContext
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof patchFamilyGroupIdGroup>>,
  TError,
  { idGroup: string; data: UpdateFamilyGroup },
  TContext
> => {
  const mutationOptions = getPatchFamilyGroupIdGroupMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type transferFamilyGroupOwnershipResponse200 = {
  data: TransferFamilyGroupOwnership200;
  status: 200;
};

export type transferFamilyGroupOwnershipResponse400 = {
  data: Error;
  status: 400;
};

export type transferFamilyGroupOwnershipResponse401 = {
  data: Error;
  status: 401;
};

export type transferFamilyGroupOwnershipResponse403 = {
  data: Error;
  status: 403;
};

export type transferFamilyGroupOwnershipResponse404 = {
  data: Error;
  status: 404;
};

export type transferFamilyGroupOwnershipResponse500 = {
  data: Error;
  status: 500;
};

export type transferFamilyGroupOwnershipResponseSuccess =
  transferFamilyGroupOwnershipResponse200 & {
    headers: Headers;
  };
export type transferFamilyGroupOwnershipResponseError = (
  | transferFamilyGroupOwnershipResponse400
  | transferFamilyGroupOwnershipResponse401
  | transferFamilyGroupOwnershipResponse403
  | transferFamilyGroupOwnershipResponse404
  | transferFamilyGroupOwnershipResponse500
) & {
  headers: Headers;
};

export type transferFamilyGroupOwnershipResponse =
  | transferFamilyGroupOwnershipResponseSuccess
  | transferFamilyGroupOwnershipResponseError;

export const getTransferFamilyGroupOwnershipUrl = (idGroup: string) => {
  return `/familyGroup/${idGroup}/transfer-ownership`;
};

export const transferFamilyGroupOwnership = async (
  idGroup: string,
  transferOwnership: TransferOwnership,
  options?: RequestInit,
): Promise<transferFamilyGroupOwnershipResponse> => {
  return rnFetch<transferFamilyGroupOwnershipResponse>(
    getTransferFamilyGroupOwnershipUrl(idGroup),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(transferOwnership),
    },
  );
};

export const getTransferFamilyGroupOwnershipMutationOptions = <
  TError = Error | Error | Error | Error | Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof transferFamilyGroupOwnership>>,
    TError,
    { idGroup: string; data: TransferOwnership },
    TContext
  >;
  request?: SecondParameter<typeof rnFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof transferFamilyGroupOwnership>>,
  TError,
  { idGroup: string; data: TransferOwnership },
  TContext
> => {
  const mutationKey = ["transferFamilyGroupOwnership"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof transferFamilyGroupOwnership>>,
    { idGroup: string; data: TransferOwnership }
  > = (props) => {
    const { idGroup, data } = props ?? {};

    return transferFamilyGroupOwnership(idGroup, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TransferFamilyGroupOwnershipMutationResult = NonNullable<
  Awaited<ReturnType<typeof transferFamilyGroupOwnership>>
>;
export type TransferFamilyGroupOwnershipMutationBody = TransferOwnership;
export type TransferFamilyGroupOwnershipMutationError =
  | Error
  | Error
  | Error
  | Error
  | Error;

export const useTransferFamilyGroupOwnership = <
  TError = Error | Error | Error | Error | Error,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof transferFamilyGroupOwnership>>,
      TError,
      { idGroup: string; data: TransferOwnership },
      TContext
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof transferFamilyGroupOwnership>>,
  TError,
  { idGroup: string; data: TransferOwnership },
  TContext
> => {
  const mutationOptions =
    getTransferFamilyGroupOwnershipMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type getActivitiesIdResponse200 = {
  data: Activity;
  status: 200;
};

export type getActivitiesIdResponse404 = {
  data: Error;
  status: 404;
};

export type getActivitiesIdResponse500 = {
  data: Error;
  status: 500;
};

export type getActivitiesIdResponseSuccess = getActivitiesIdResponse200 & {
  headers: Headers;
};
export type getActivitiesIdResponseError = (
  | getActivitiesIdResponse404
  | getActivitiesIdResponse500
) & {
  headers: Headers;
};

export type getActivitiesIdResponse =
  | getActivitiesIdResponseSuccess
  | getActivitiesIdResponseError;

export const getGetActivitiesIdUrl = (id: string) => {
  return `/activities/${id}`;
};

export const getActivitiesId = async (
  id: string,
  options?: RequestInit,
): Promise<getActivitiesIdResponse> => {
  return rnFetch<getActivitiesIdResponse>(getGetActivitiesIdUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getGetActivitiesIdQueryKey = (id?: string) => {
  return [`/activities/${id}`] as const;
};

export const getGetActivitiesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getActivitiesId>>,
  TError = Error | Error,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetActivitiesIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getActivitiesId>>> = ({
    signal,
  }) => getActivitiesId(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getActivitiesId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetActivitiesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getActivitiesId>>
>;
export type GetActivitiesIdQueryError = Error | Error;

export function useGetActivitiesId<
  TData = Awaited<ReturnType<typeof getActivitiesId>>,
  TError = Error | Error,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActivitiesId>>,
          TError,
          Awaited<ReturnType<typeof getActivitiesId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetActivitiesId<
  TData = Awaited<ReturnType<typeof getActivitiesId>>,
  TError = Error | Error,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActivitiesId>>,
          TError,
          Awaited<ReturnType<typeof getActivitiesId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetActivitiesId<
  TData = Awaited<ReturnType<typeof getActivitiesId>>,
  TError = Error | Error,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetActivitiesId<
  TData = Awaited<ReturnType<typeof getActivitiesId>>,
  TError = Error | Error,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetActivitiesIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type patchActivitiesIdResponse200 = {
  data: Activity;
  status: 200;
};

export type patchActivitiesIdResponse400 = {
  data: Error;
  status: 400;
};

export type patchActivitiesIdResponse404 = {
  data: Error;
  status: 404;
};

export type patchActivitiesIdResponse500 = {
  data: Error;
  status: 500;
};

export type patchActivitiesIdResponseSuccess = patchActivitiesIdResponse200 & {
  headers: Headers;
};
export type patchActivitiesIdResponseError = (
  | patchActivitiesIdResponse400
  | patchActivitiesIdResponse404
  | patchActivitiesIdResponse500
) & {
  headers: Headers;
};

export type patchActivitiesIdResponse =
  | patchActivitiesIdResponseSuccess
  | patchActivitiesIdResponseError;

export const getPatchActivitiesIdUrl = (id: string) => {
  return `/activities/${id}`;
};

export const patchActivitiesId = async (
  id: string,
  updateActivity: UpdateActivity,
  options?: RequestInit,
): Promise<patchActivitiesIdResponse> => {
  return rnFetch<patchActivitiesIdResponse>(getPatchActivitiesIdUrl(id), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateActivity),
  });
};

export const getPatchActivitiesIdMutationOptions = <
  TError = Error | Error | Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchActivitiesId>>,
    TError,
    { id: string; data: UpdateActivity },
    TContext
  >;
  request?: SecondParameter<typeof rnFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchActivitiesId>>,
  TError,
  { id: string; data: UpdateActivity },
  TContext
> => {
  const mutationKey = ["patchActivitiesId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchActivitiesId>>,
    { id: string; data: UpdateActivity }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchActivitiesId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchActivitiesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchActivitiesId>>
>;
export type PatchActivitiesIdMutationBody = UpdateActivity;
export type PatchActivitiesIdMutationError = Error | Error | Error;

export const usePatchActivitiesId = <
  TError = Error | Error | Error,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof patchActivitiesId>>,
      TError,
      { id: string; data: UpdateActivity },
      TContext
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof patchActivitiesId>>,
  TError,
  { id: string; data: UpdateActivity },
  TContext
> => {
  const mutationOptions = getPatchActivitiesIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type deleteActivitiesIdResponse204 = {
  data: void;
  status: 204;
};

export type deleteActivitiesIdResponse404 = {
  data: Error;
  status: 404;
};

export type deleteActivitiesIdResponse500 = {
  data: Error;
  status: 500;
};

export type deleteActivitiesIdResponseSuccess =
  deleteActivitiesIdResponse204 & {
    headers: Headers;
  };
export type deleteActivitiesIdResponseError = (
  | deleteActivitiesIdResponse404
  | deleteActivitiesIdResponse500
) & {
  headers: Headers;
};

export type deleteActivitiesIdResponse =
  | deleteActivitiesIdResponseSuccess
  | deleteActivitiesIdResponseError;

export const getDeleteActivitiesIdUrl = (id: string) => {
  return `/activities/${id}`;
};

export const deleteActivitiesId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteActivitiesIdResponse> => {
  return rnFetch<deleteActivitiesIdResponse>(getDeleteActivitiesIdUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteActivitiesIdMutationOptions = <
  TError = Error | Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteActivitiesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof rnFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteActivitiesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteActivitiesId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteActivitiesId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteActivitiesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteActivitiesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteActivitiesId>>
>;

export type DeleteActivitiesIdMutationError = Error | Error;

export const useDeleteActivitiesId = <
  TError = Error | Error,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteActivitiesId>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteActivitiesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteActivitiesIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type getActivitiesFamilyCodeIdFamilyGroupResponse200 = {
  data: Activity[];
  status: 200;
};

export type getActivitiesFamilyCodeIdFamilyGroupResponse404 = {
  data: Error;
  status: 404;
};

export type getActivitiesFamilyCodeIdFamilyGroupResponse500 = {
  data: Error;
  status: 500;
};

export type getActivitiesFamilyCodeIdFamilyGroupResponseSuccess =
  getActivitiesFamilyCodeIdFamilyGroupResponse200 & {
    headers: Headers;
  };
export type getActivitiesFamilyCodeIdFamilyGroupResponseError = (
  | getActivitiesFamilyCodeIdFamilyGroupResponse404
  | getActivitiesFamilyCodeIdFamilyGroupResponse500
) & {
  headers: Headers;
};

export type getActivitiesFamilyCodeIdFamilyGroupResponse =
  | getActivitiesFamilyCodeIdFamilyGroupResponseSuccess
  | getActivitiesFamilyCodeIdFamilyGroupResponseError;

export const getGetActivitiesFamilyCodeIdFamilyGroupUrl = (
  idFamilyGroup: string,
) => {
  return `/activities/familyCode/${idFamilyGroup}`;
};

export const getActivitiesFamilyCodeIdFamilyGroup = async (
  idFamilyGroup: string,
  options?: RequestInit,
): Promise<getActivitiesFamilyCodeIdFamilyGroupResponse> => {
  return rnFetch<getActivitiesFamilyCodeIdFamilyGroupResponse>(
    getGetActivitiesFamilyCodeIdFamilyGroupUrl(idFamilyGroup),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetActivitiesFamilyCodeIdFamilyGroupQueryKey = (
  idFamilyGroup?: string,
) => {
  return [`/activities/familyCode/${idFamilyGroup}`] as const;
};

export const getGetActivitiesFamilyCodeIdFamilyGroupQueryOptions = <
  TData = Awaited<ReturnType<typeof getActivitiesFamilyCodeIdFamilyGroup>>,
  TError = Error | Error,
>(
  idFamilyGroup: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesFamilyCodeIdFamilyGroup>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetActivitiesFamilyCodeIdFamilyGroupQueryKey(idFamilyGroup);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getActivitiesFamilyCodeIdFamilyGroup>>
  > = ({ signal }) =>
    getActivitiesFamilyCodeIdFamilyGroup(idFamilyGroup, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!idFamilyGroup,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getActivitiesFamilyCodeIdFamilyGroup>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetActivitiesFamilyCodeIdFamilyGroupQueryResult = NonNullable<
  Awaited<ReturnType<typeof getActivitiesFamilyCodeIdFamilyGroup>>
>;
export type GetActivitiesFamilyCodeIdFamilyGroupQueryError = Error | Error;

export function useGetActivitiesFamilyCodeIdFamilyGroup<
  TData = Awaited<ReturnType<typeof getActivitiesFamilyCodeIdFamilyGroup>>,
  TError = Error | Error,
>(
  idFamilyGroup: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesFamilyCodeIdFamilyGroup>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActivitiesFamilyCodeIdFamilyGroup>>,
          TError,
          Awaited<ReturnType<typeof getActivitiesFamilyCodeIdFamilyGroup>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetActivitiesFamilyCodeIdFamilyGroup<
  TData = Awaited<ReturnType<typeof getActivitiesFamilyCodeIdFamilyGroup>>,
  TError = Error | Error,
>(
  idFamilyGroup: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesFamilyCodeIdFamilyGroup>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActivitiesFamilyCodeIdFamilyGroup>>,
          TError,
          Awaited<ReturnType<typeof getActivitiesFamilyCodeIdFamilyGroup>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetActivitiesFamilyCodeIdFamilyGroup<
  TData = Awaited<ReturnType<typeof getActivitiesFamilyCodeIdFamilyGroup>>,
  TError = Error | Error,
>(
  idFamilyGroup: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesFamilyCodeIdFamilyGroup>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetActivitiesFamilyCodeIdFamilyGroup<
  TData = Awaited<ReturnType<typeof getActivitiesFamilyCodeIdFamilyGroup>>,
  TError = Error | Error,
>(
  idFamilyGroup: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getActivitiesFamilyCodeIdFamilyGroup>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetActivitiesFamilyCodeIdFamilyGroupQueryOptions(
    idFamilyGroup,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type postActivitiesResponse201 = {
  data: Activity;
  status: 201;
};

export type postActivitiesResponse400 = {
  data: Error;
  status: 400;
};

export type postActivitiesResponse500 = {
  data: Error;
  status: 500;
};

export type postActivitiesResponseSuccess = postActivitiesResponse201 & {
  headers: Headers;
};
export type postActivitiesResponseError = (
  | postActivitiesResponse400
  | postActivitiesResponse500
) & {
  headers: Headers;
};

export type postActivitiesResponse =
  | postActivitiesResponseSuccess
  | postActivitiesResponseError;

export const getPostActivitiesUrl = () => {
  return `/activities`;
};

export const postActivities = async (
  newActivity: NewActivity,
  options?: RequestInit,
): Promise<postActivitiesResponse> => {
  return rnFetch<postActivitiesResponse>(getPostActivitiesUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(newActivity),
  });
};

export const getPostActivitiesMutationOptions = <
  TError = Error | Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postActivities>>,
    TError,
    { data: NewActivity },
    TContext
  >;
  request?: SecondParameter<typeof rnFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postActivities>>,
  TError,
  { data: NewActivity },
  TContext
> => {
  const mutationKey = ["postActivities"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postActivities>>,
    { data: NewActivity }
  > = (props) => {
    const { data } = props ?? {};

    return postActivities(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostActivitiesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postActivities>>
>;
export type PostActivitiesMutationBody = NewActivity;
export type PostActivitiesMutationError = Error | Error;

export const usePostActivities = <TError = Error | Error, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postActivities>>,
      TError,
      { data: NewActivity },
      TContext
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postActivities>>,
  TError,
  { data: NewActivity },
  TContext
> => {
  const mutationOptions = getPostActivitiesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type getMemoriesResponse200 = {
  data: GetMemories200;
  status: 200;
};

export type getMemoriesResponse400 = {
  data: Error;
  status: 400;
};

export type getMemoriesResponse500 = {
  data: Error;
  status: 500;
};

export type getMemoriesResponseSuccess = getMemoriesResponse200 & {
  headers: Headers;
};
export type getMemoriesResponseError = (
  | getMemoriesResponse400
  | getMemoriesResponse500
) & {
  headers: Headers;
};

export type getMemoriesResponse =
  | getMemoriesResponseSuccess
  | getMemoriesResponseError;

export const getGetMemoriesUrl = (params?: GetMemoriesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/memories?${stringifiedParams}`
    : `/memories`;
};

export const getMemories = async (
  params?: GetMemoriesParams,
  options?: RequestInit,
): Promise<getMemoriesResponse> => {
  return rnFetch<getMemoriesResponse>(getGetMemoriesUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getGetMemoriesQueryKey = (params?: GetMemoriesParams) => {
  return [`/memories`, ...(params ? [params] : [])] as const;
};

export const getGetMemoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getMemories>>,
  TError = Error | Error,
>(
  params?: GetMemoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMemories>>, TError, TData>
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMemoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMemories>>> = ({
    signal,
  }) => getMemories(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMemories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMemoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMemories>>
>;
export type GetMemoriesQueryError = Error | Error;

export function useGetMemories<
  TData = Awaited<ReturnType<typeof getMemories>>,
  TError = Error | Error,
>(
  params: undefined | GetMemoriesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMemories>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMemories>>,
          TError,
          Awaited<ReturnType<typeof getMemories>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMemories<
  TData = Awaited<ReturnType<typeof getMemories>>,
  TError = Error | Error,
>(
  params?: GetMemoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMemories>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMemories>>,
          TError,
          Awaited<ReturnType<typeof getMemories>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMemories<
  TData = Awaited<ReturnType<typeof getMemories>>,
  TError = Error | Error,
>(
  params?: GetMemoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMemories>>, TError, TData>
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetMemories<
  TData = Awaited<ReturnType<typeof getMemories>>,
  TError = Error | Error,
>(
  params?: GetMemoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMemories>>, TError, TData>
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMemoriesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type getMemoriesIdResponse200 = {
  data: Memory;
  status: 200;
};

export type getMemoriesIdResponse400 = {
  data: Error;
  status: 400;
};

export type getMemoriesIdResponse404 = {
  data: Error;
  status: 404;
};

export type getMemoriesIdResponse500 = {
  data: Error;
  status: 500;
};

export type getMemoriesIdResponseSuccess = getMemoriesIdResponse200 & {
  headers: Headers;
};
export type getMemoriesIdResponseError = (
  | getMemoriesIdResponse400
  | getMemoriesIdResponse404
  | getMemoriesIdResponse500
) & {
  headers: Headers;
};

export type getMemoriesIdResponse =
  | getMemoriesIdResponseSuccess
  | getMemoriesIdResponseError;

export const getGetMemoriesIdUrl = (id: string) => {
  return `/memories/${id}`;
};

export const getMemoriesId = async (
  id: string,
  options?: RequestInit,
): Promise<getMemoriesIdResponse> => {
  return rnFetch<getMemoriesIdResponse>(getGetMemoriesIdUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getGetMemoriesIdQueryKey = (id?: string) => {
  return [`/memories/${id}`] as const;
};

export const getGetMemoriesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getMemoriesId>>,
  TError = Error | Error | Error,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMemoriesId>>, TError, TData>
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMemoriesIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMemoriesId>>> = ({
    signal,
  }) => getMemoriesId(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMemoriesId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMemoriesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMemoriesId>>
>;
export type GetMemoriesIdQueryError = Error | Error | Error;

export function useGetMemoriesId<
  TData = Awaited<ReturnType<typeof getMemoriesId>>,
  TError = Error | Error | Error,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMemoriesId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMemoriesId>>,
          TError,
          Awaited<ReturnType<typeof getMemoriesId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMemoriesId<
  TData = Awaited<ReturnType<typeof getMemoriesId>>,
  TError = Error | Error | Error,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMemoriesId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMemoriesId>>,
          TError,
          Awaited<ReturnType<typeof getMemoriesId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMemoriesId<
  TData = Awaited<ReturnType<typeof getMemoriesId>>,
  TError = Error | Error | Error,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMemoriesId>>, TError, TData>
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetMemoriesId<
  TData = Awaited<ReturnType<typeof getMemoriesId>>,
  TError = Error | Error | Error,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMemoriesId>>, TError, TData>
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMemoriesIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type deleteMemoryResponse200 = {
  data: void;
  status: 200;
};

export type deleteMemoryResponse400 = {
  data: Error;
  status: 400;
};

export type deleteMemoryResponse401 = {
  data: Error;
  status: 401;
};

export type deleteMemoryResponse403 = {
  data: Error;
  status: 403;
};

export type deleteMemoryResponse404 = {
  data: Error;
  status: 404;
};

export type deleteMemoryResponse500 = {
  data: Error;
  status: 500;
};

export type deleteMemoryResponseSuccess = deleteMemoryResponse200 & {
  headers: Headers;
};
export type deleteMemoryResponseError = (
  | deleteMemoryResponse400
  | deleteMemoryResponse401
  | deleteMemoryResponse403
  | deleteMemoryResponse404
  | deleteMemoryResponse500
) & {
  headers: Headers;
};

export type deleteMemoryResponse =
  | deleteMemoryResponseSuccess
  | deleteMemoryResponseError;

export const getDeleteMemoryUrl = (id: string) => {
  return `/memories/${id}`;
};

export const deleteMemory = async (
  id: string,
  options?: RequestInit,
): Promise<deleteMemoryResponse> => {
  return rnFetch<deleteMemoryResponse>(getDeleteMemoryUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteMemoryMutationOptions = <
  TError = Error | Error | Error | Error | Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMemory>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof rnFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMemory>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteMemory"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMemory>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteMemory(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMemoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMemory>>
>;

export type DeleteMemoryMutationError = Error | Error | Error | Error | Error;

export const useDeleteMemory = <
  TError = Error | Error | Error | Error | Error,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteMemory>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteMemory>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteMemoryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type createMemoryWithMediaResponse201 = {
  data: Memory;
  status: 201;
};

export type createMemoryWithMediaResponse400 = {
  data: Error;
  status: 400;
};

export type createMemoryWithMediaResponse401 = {
  data: Error;
  status: 401;
};

export type createMemoryWithMediaResponse413 = {
  data: Error;
  status: 413;
};

export type createMemoryWithMediaResponse415 = {
  data: Error;
  status: 415;
};

export type createMemoryWithMediaResponse500 = {
  data: Error;
  status: 500;
};

export type createMemoryWithMediaResponseSuccess =
  createMemoryWithMediaResponse201 & {
    headers: Headers;
  };
export type createMemoryWithMediaResponseError = (
  | createMemoryWithMediaResponse400
  | createMemoryWithMediaResponse401
  | createMemoryWithMediaResponse413
  | createMemoryWithMediaResponse415
  | createMemoryWithMediaResponse500
) & {
  headers: Headers;
};

export type createMemoryWithMediaResponse =
  | createMemoryWithMediaResponseSuccess
  | createMemoryWithMediaResponseError;

export const getCreateMemoryWithMediaUrl = () => {
  return `/memories/upload`;
};

export const createMemoryWithMedia = async (
  createMemoryWithMediaBody: CreateMemoryWithMediaBody,
  options?: RequestInit,
): Promise<createMemoryWithMediaResponse> => {
  const formData = new FormData();
  formData.append(`bookId`, createMemoryWithMediaBody.bookId);
  formData.append(`groupId`, createMemoryWithMediaBody.groupId);
  if (createMemoryWithMediaBody.title !== undefined) {
    formData.append(`title`, createMemoryWithMediaBody.title);
  }
  if (createMemoryWithMediaBody.caption !== undefined) {
    formData.append(`caption`, createMemoryWithMediaBody.caption);
  }
  formData.append(`image`, createMemoryWithMediaBody.image);

  return rnFetch<createMemoryWithMediaResponse>(getCreateMemoryWithMediaUrl(), {
    ...options,
    method: "POST",
    body: formData,
  });
};

export const getCreateMemoryWithMediaMutationOptions = <
  TError = Error | Error | Error | Error | Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createMemoryWithMedia>>,
    TError,
    { data: CreateMemoryWithMediaBody },
    TContext
  >;
  request?: SecondParameter<typeof rnFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createMemoryWithMedia>>,
  TError,
  { data: CreateMemoryWithMediaBody },
  TContext
> => {
  const mutationKey = ["createMemoryWithMedia"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createMemoryWithMedia>>,
    { data: CreateMemoryWithMediaBody }
  > = (props) => {
    const { data } = props ?? {};

    return createMemoryWithMedia(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateMemoryWithMediaMutationResult = NonNullable<
  Awaited<ReturnType<typeof createMemoryWithMedia>>
>;
export type CreateMemoryWithMediaMutationBody = CreateMemoryWithMediaBody;
export type CreateMemoryWithMediaMutationError =
  | Error
  | Error
  | Error
  | Error
  | Error;

export const useCreateMemoryWithMedia = <
  TError = Error | Error | Error | Error | Error,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createMemoryWithMedia>>,
      TError,
      { data: CreateMemoryWithMediaBody },
      TContext
    >;
    request?: SecondParameter<typeof rnFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createMemoryWithMedia>>,
  TError,
  { data: CreateMemoryWithMediaBody },
  TContext
> => {
  const mutationOptions = getCreateMemoryWithMediaMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
